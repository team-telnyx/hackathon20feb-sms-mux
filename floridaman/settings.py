"""
Django settings for floridaman project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

import telnyx

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "61vd$$sv!@x691)j^uif=qhfdv3jrsa7rs^0z1r*b=kn%#z*v2"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# REITERATING THE WARNING: Django will leak environment variables on debug pages,
# which includes the Telnyx API Key. LEAKING API KEYS IS EXTREMELY DANGEROUS.
#
# This was fixed in https://code.djangoproject.com/ticket/23004 but it will not be
# available until Django 3.1 or later.

ALLOWED_HOSTS = [
    # DEV ONLY, NO PROD.
    ".ngrok.io",
    "localhost",
    "127.0.0.1",
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "medium",},
    },
    "formatters": {
        "medium": {
            "class": "logging.Formatter",
            "format": "%(asctime)s %(name)-15s %(levelname)-8s %(message)s",
        },
        "detailed": {
            "class": "logging.Formatter",
            "format": "%(asctime)s %(name)-15s %(levelname)-8s %(processName)-10s %(message)s",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        "smsfwd": {
            "handlers": ["console"],
            "level": os.getenv("FLORIDAMAN_LOG_LEVEL", "INFO"),
        },
        "floridaman": {
            "handlers": ["console"],
            "level": os.getenv("FLORIDAMAN_LOG_LEVEL", "INFO"),
        },
    },
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    #
    # Third Party
    "corsheaders",
    "rest_framework",
    #
    # First Party
    "smsfwd.apps.SmsFwdConfig",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "floridaman.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "floridaman.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "client", "build")
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ]
}


# DEV ONLY; DO NOT SET TRUE IN PROD!
CORS_ORIGIN_ALLOW_ALL = True


_UNSET = "unset!"
TELNYX = {
    "API_KEY": os.getenv("TELNYX_API_KEY", _UNSET),
    "WEBHOOK_PUBLIC_KEY": os.getenv("TELNYX_WEBHOOK_PUBLIC_KEY", _UNSET),
}

for k, v in TELNYX.items():
    if v is _UNSET:
        print(f"WARNING: envvar TELNYX_{k} was not set, malfunctions may occur.")

telnyx.api_key = TELNYX["API_KEY"]
telnyx.public_key = TELNYX["WEBHOOK_PUBLIC_KEY"]


WEBHOOK_BASE_URL = os.environ["WEBHOOK_BASE_URL"]
